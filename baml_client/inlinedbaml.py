###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Sonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> Haiku {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [GPT4oMini, Haiku]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT4o, GPT4oMini]\n  }\n}\n\nclient<llm> Local {\n  provider ollama\n  options {\n    default_role \"user\"\n    model \"mistral-nemo:12b-instruct-2407-q8_0\"\n    num_ctx 131072\n  }\n}\n\nclient<llm> OpenRouter {\n  provider openai-generic\n  options {\n    api_key env.OPENROUTER_API_KEY\n    base_url \"https://openrouter.ai/api/v1\"\n    model openai/gpt-4o-mini\n    // model nousresearch/hermes-3-llama-3.1-405b:free\n  }\n}\n\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.57.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "tv-show-info.baml": "// Defining a data model.\nclass TVShowInfo {\n  idx int\n  series_name string @description(#\"Use full name if possible. DO NOT use underscores in series name. DO NOT translate. DO NOT include season info.\"#)\n  season_number int? @description(#\"Season number may not present. Is usually indicated by S1/S01 S2/S02\"#)\n  special_name string? @description(#\"In some cases, there are special episodes usually denoted with OAD/OVA/SP/Bonus/MV/OP/ED/MMR/Sample or non integer episode number like 65.5 etc. Output them here. null if otherwise. DO NOT output special characters. DO NOT output numbers. If you encounter non video files, write its extension.\n  \"#)\n  episode_number int? @description(#\"Extremely likely to contain episode number. Find episode numbers with best effort. Episode numbers can be in brackets (v2/v3 indicates a re-release. remove v2/v3). If you encounter a range in filename, it indicates the range of episodes in the season, not the episode number. If you encounter special episodes, extract and output episode number (e.g. output 1 for OAD01 or OVA01, output 2 for SP02, output 3 for VOL.3, output 4 for EP4 and so on)\n  \"#)\n}\n\nclass TVShowFile {\n  folder string\n  filename string\n}\n\n// Creating a function to extract the resume from a string.\nfunction ExtractShowInfo(files: TVShowFile[]) -> TVShowInfo[] {\n  client \"OpenRouter\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\nBelow are TV shows files. Extract info from filepaths below.\nEach file is ONE EPISODE. \nFilepaths MAY contain additional/unrelated info that is not useful and confusing.\nFilepaths are unstructured, so think logically and guess the episodes with best effort.\n    {% for fp in files %}\n      {{ loop.index }}. Folder: {{ fp.folder }} | Filename: {{ fp.filename }}\n    {% endfor %}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Testing the function with a sample resume.\ntest animes {\n  functions [ExtractShowInfo]\n  args {\n    files [{\n      folder \"./To Love (1080p)/To Love Ru Darkness/11/\"\n      filename \"[Airota][To Love-Ru Darkness][11][BDrip_1080P][x264-Hi10P_FLAC].mkv\"\n    }, {\n      folder \"./Hoozuki no Reitetsu (720p)/[BeanSub&FZSD][Hoozuki_no_Reitetsu_S2][01-26][BIG5][720P][MP4]/\"\n      filename \"[BeanSub&FZSD][Hoozuki_no_Reitetsu_S2][12][BIG5][720P][x264_AAC].mp4\"\n    }]\n  }\n}\n",
}

def get_baml_files():
    return file_map